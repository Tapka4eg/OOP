#include <iostream>
#include "Phone.h"
#include "Pad.h"
/*Дополнить код задания 3 лабораторной работы № 2, написав еще два класса по предметной области, в соответствии с вариантом. Продумать и корректно реализовать схему 
наследования классов. В главной функции продемонстрировать применение интерфейса, полиморфизм и RTTI на примере 3-4 объектов классов, по аналогии с заданием 1. 

Вариант 4:
Класс ТЕЛЕФОН + классы МОБИЛЬНОЕ УСТРОЙСТВО, ПЛАНШЕТ.
Реализовать схему наследования классов и корректно распределить по классам данные:
фирма-производитель, модель, номер телефона, последний набранный номер, остаток на счету, вес, цвет, цена, уровень заряда.
Интерфейс возможности звонка ICallable с методом void call(const std::string& recepient) – позвонить по номеру recepient. 
Реализация метода в классе телефона:
проверка корректности номера телефона (содержит только цифры), снятие суммы со счета и расходование 3% заряда. 
Реализация метода в классе планшета: израсходовать 10% заряда (звонок идет по скайпу). 
В main() создать 2 телефона и 2 планшета, продемонстрировать полиморфизм call().
*/
int main()
{
    MobileDevice* devices[4];
    Phone* phone1 = new Phone("Apple", "iPhone X", "+380669623181", "Black", 100, 150.5, 1000, 37);
    devices[0] = phone1;

    Phone* phone2 = new Phone("Samsung", "J1 Ace", "+380713968469", "Black", 20, 140.5, 200, 84);
    devices[1] = phone2;

    Pad* pad1 = new Pad("Apple", "iPad 7", "+7OOPS344567832", "Pink", 356.45, 899, 100);
    devices[2] = pad1;

    Pad* pad2 = new Pad("Asus","Memo Pad 7","+380669874532", "White", 285, 100, 69);
    devices[3] = pad2;

    for (int i = 0, j = 3; i < 4 && j >= 0; i++, j--)
    {
        ICallable* callable = dynamic_cast<ICallable*>(devices[i]);
        if (devices != nullptr)
        {
            callable->call(devices[j]->getNumber());
            devices[i]->printInfo();
        }
    }
    return 0;
}
